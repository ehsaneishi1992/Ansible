---
- name: Install Docker, Docker Compose, and Git
  hosts: new_customer_servers
  become: yes

  vars:
    docker_user: "{{ ansible_user }}"  # override if needed
    env_file_path: ravan-dockerize/.env
    db_root_password: "{{ lookup('password', '/dev/null length=24 chars=ascii_letters,digits') }}"
    ravanpl_db_password: "{{ lookup('password', '/dev/null length=20 chars=ascii_letters,digits') }}"
    backup_config_path: /ScheduledTasks/etc/backup-config
    gitlab_address: "185.23.130.7:8929"

  tasks:
    - name: Update apt cache
      apt:
        update_cache: yes
      changed_when: false

    - name: Check if Docker is already installed
      command: docker --version
      register: docker_installed
      ignore_errors: yes
      changed_when: false

    - name: Install docker.io and docker-compose
      apt:
        name:
          - docker.io
          - docker-compose
        state: present
      when: docker_installed.rc != 0

    - name: Enable and start Docker service
      systemd:
        name: docker
        enabled: yes
        state: started

    - name: Check if user is in docker group
      command: id -nG {{ docker_user }}
      register: user_groups
      changed_when: false

    - name: Add user to docker group if not already in
      user:
        name: "{{ docker_user }}"
        groups: docker
        append: yes
      when: "'docker' not in user_groups.stdout.split()"

    - name: Check Docker version
      command: docker --version
      register: docker_version
      changed_when: false

    - name: Show Docker version
      debug:
        var: docker_version.stdout

    - name: Check Docker Compose version
      command: docker-compose --version
      register: docker_compose_version
      changed_when: false

    - name: Show Docker Compose version
      debug:
        var: docker_compose_version.stdout

    - name: Check if Git is already installed
      command: git --version
      register: git_installed
      ignore_errors: yes
      changed_when: false

    - name: Install Git on Debian/Ubuntu
      apt:
        name: git
        state: present
      when:
        - ansible_os_family == "Debian"
        - git_installed.rc != 0

    - name: Ensure correct ownership of existing repo directory
      file:
        path: /home/ravanuser/ravan-dockerize
        owner: ravanuser
        group: ravanuser
        recurse: yes
      become: yes
      when: ansible_user != 'root' and ansible_user != 'ravanuser'  # Optional safety

    - name: Mark the repo path as a safe Git directory
      command: git config --global --add safe.directory /home/ravanuser/ravan-dockerize
      become: yes
      become_user: ravanuser

    - name: Clone or update ravan-dockerize branch 1.6.0 with credentials
      git:
        repo: "http://{{ git_username }}:{{ git_password }}@{{ gitlab_address }}/devops/ravan/ravan-dockerize.git"
        dest: /home/ravanuser/ravan-dockerize
        version: 1.6.0
        single_branch: yes
        force: yes
      become: yes
      become_user: ravanuser

    - name: Install common packages
      apt:
        name:
          - openssh-server
          - nano
          - vim
          - mc
          - aptitude
          - tmux
          - wget
          - htop
          - rsync
          - curl
          - ntfs-3g
          - net-tools
          - iptables
          - sudo
          - lynx
          - parted
          - gnupg2
          - lsb-release
          - libgif7
          - libpixman-1-0
          - telnet
          - apt-transport-https
          - ca-certificates
          - elinks
          - software-properties-common
        state: present
        update_cache: yes

    - name: Set DB_ROOT_PASSWORD in .env
      lineinfile:
        path: "{{ env_file_path }}"
        regexp: '^DB_ROOT_PASSWORD='
        line: "DB_ROOT_PASSWORD={{ db_root_password }}"
        create: yes
        backup: yes

    - name: Set DB_PASSWORD in .env
      lineinfile:
        path: "{{ env_file_path }}"
        regexp: '^DB_PASSWORD='
        line: "DB_PASSWORD={{ ravanpl_db_password }}"
        create: yes
        backup: yes

    - name: Read DB_ROOT_PASSWORD from .env
      shell: grep '^DB_ROOT_PASSWORD=' "{{ env_file_path }}" | cut -d '=' -f2
      register: db_root_password_result

    - name: Read DB_PASSWORD from .env
      shell: grep '^DB_PASSWORD=' "{{ env_file_path }}" | cut -d '=' -f2
      register: ravanpl_db_password_result

    - name: Display generated DB root password
      debug:
        msg: "Generated root db password: {{ db_root_password_result.stdout }}"

    - name: Display generated RavanPL DB password
      debug:
        msg: "Generated ravanpl db password: {{ ravanpl_db_password_result.stdout }}"

    - name: Load Docker images
      become_user: ravanuser
      shell: |
        docker load -i ravan-dockerize/ravan-dockerize-nginx-1.6.0.tar
        docker load -i ravan-dockerize/ravan-dockerize-db-1.6.0.tar
        docker load -i ravan-dockerize/ravan-dockerize-convertor-1.6.0.tar
        docker load -i ravan-dockerize/phpmyadmin-1.6.0.tar
      args:
        chdir: /home/ravanuser

    - name: Create Docker volumes
      docker_volume:
        name: "{{ item }}"
        state: present
      loop:
        - nginx_data
        - nginx_config
        - mariadb_config
        - scheduledTasks
        - ssl_data

    - name: Docker Compose Up
      become_user: ravanuser
      shell: docker-compose -f docker-compose.yaml up -d
      args:
        chdir: /home/ravanuser/ravan-dockerize

    - name: Pause for 10 seconds
      ansible.builtin.pause:
        seconds: 10

    - name: Set root password in backup-config inside container
      shell: >
        docker exec ravan-nginx-container sed -i
        's/password =.*/password = {{ db_root_password_result.stdout }}/'
        {{ backup_config_path }}

    - name: alter root password
      shell: >
        docker exec ravan-nginx-container mysql -uroot -p"Ehsan123123" -h 192.168.98.12 -e "
        ALTER USER 'root'@'192.168.98.10' IDENTIFIED BY '{{ db_root_password_result.stdout }}';
        ALTER USER 'root'@'192.168.98.13' IDENTIFIED BY '{{ db_root_password_result.stdout }}';
        FLUSH PRIVILEGES;"

    - name: create user and grant permissions in ravan App and db server
      shell: |
        docker exec ravan-nginx-container mysql -uroot -p'{{ db_root_password_result.stdout }}' -h 192.168.98.12 -e "CREATE USER 'ravanpl'@'192.168.98.10' IDENTIFIED BY '{{ ravanpl_db_password_result.stdout }}';"
        docker exec ravan-nginx-container mysql -uroot -p'{{ db_root_password_result.stdout }}' -h 192.168.98.12 -e "GRANT SELECT, INSERT, UPDATE, DELETE, CREATE, INDEX, ALTER, CREATE TEMPORARY TABLES, LOCK TABLES, CREATE VIEW,EVENT, TRIGGER, SHOW VIEW, CREATE ROUTINE, ALTER ROUTINE,EXECUTE ON officeas.* TO 'ravanpl'@'192.168.98.10';"
        docker exec ravan-nginx-container mysql -uroot -p'{{ db_root_password_result.stdout }}' -h 192.168.98.12 -e "FLUSH PRIVILEGES;"
